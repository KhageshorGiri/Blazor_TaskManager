@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Blazor_TaskManager.Data

@inject SignInManager<TaskManagerUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<PageTitle>Log in</PageTitle>


<style>
    .anchor-tag {
        text-decoration: none;
    }

    body {
        background-color: rebeccapurple;
    }

</style>


<div class="row d-flex justify-content-center align-items-center min-vh-100">
    <div class="col-md-4">
        <div class="card shadow-lg p-3">
            <div class="card-body">
                <div class="row">
                    <h4 class="text-center">Welcome Back!</h4>
                </div>
                <div class="row mt-3">

                    <section>
                        <StatusMessage Message="@errorMessage" />
                        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="text-danger" role="alert" />
                            <div class="form-group mb-4">
                                <InputText type="text" id="email" class="form-control" @bind-Value="Input.Email"
                                           autocomplete="username" aria-required="true" placeholder="username@example.com" />
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>

                            <div class="form-group mb-4 position-relative">
                                <InputText type="password" id="password" class="form-control" @bind-Value="Input.Password"
                                           autocomplete="current-password" aria-required="true" placeholder="password" />
                                <span class="position-absolute top-50 end-0 translate-middle-y me-3"
                                      onclick="togglePasswordVisibility()" style="cursor: pointer; z-index:2;">
                                    <i class="bi bi-eye-slash" id="togglePasswordIcon"></i>
                                </span>
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>

                            <div class="checkbox mb-4">
                                <label class="form-label">
                                    <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                                    Remember me
                                </label>

                                <p class="text-center">
                                    <a href="Account/ForgotPassword" class="anchor-tag p-0">Forgot your password?</a>
                                </p>
                            </div>
                            <div>
                                <button type="submit" class="w-100 btn btn-primary">Log in</button>
                            </div>
                            <div class="row mt-4">
                                <label class="col-md-12">
                                    <span>Dotn't have an account? </span>
                                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register",
                                       new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                                       class="anchor-tag p-0">Register</a>
                                </label>
                                <label class="col-md-12 mt-1" hidden>
                                    <a href="Account/ResendEmailConfirmation" class="anchor-tag p-0">Resend email confirmation</a>
                                </label>
                            </div>
                            <div class="row my-3"> <span class="text-center">or</span></div>
                            <div class="row">

                                <button type="button" class="w-100 btn btn-outline-info">
                                    <i class="bi bi-google me-2"></i> <span class="text-center">Log in with Google</span>
                                </button>
                            </div>

                        </EditForm>
                    </section>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    function togglePasswordVisibility() {
        const passwordField = document.getElementById('password');
        const toggleIcon = document.getElementById('togglePasswordIcon');

        if (passwordField.type === 'password') {
            passwordField.type = 'text';
            toggleIcon.classList.remove('bi-eye-slash');
            toggleIcon.classList.add('bi-eye');
        } else {
            passwordField.type = 'password';
            toggleIcon.classList.remove('bi-eye');
            toggleIcon.classList.add('bi-eye-slash');
        }
    }
</script>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
