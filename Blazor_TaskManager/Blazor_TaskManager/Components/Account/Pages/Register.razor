@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Blazor_TaskManager.Data

@inject UserManager<TaskManagerUser> UserManager
@inject IUserStore<TaskManagerUser> UserStore
@inject SignInManager<TaskManagerUser> SignInManager
@inject IEmailSender<TaskManagerUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<style>
    .anchor-tag {
        text-decoration: none;
    }

    body {
        background-color: rebeccapurple;
    }

</style>

<div class="row d-flex justify-content-center align-items-center min-vh-100">
    <div class="col-md-4">
        <div class="card shadow-lg p-3">
            <div class="card-body">
                <div class="row">
                    <h4 class="text-center">Sign Up</h4>
                </div>
                <div class="row mt-3">
                    <section>
                        <StatusMessage Message="@Message" />
                        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                            <DataAnnotationsValidator />
                            <div class="form-group mb-3">
                                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username"
                                           aria-required="true" placeholder="username@example.com" />
                                <ValidationMessage For="() => Input.Email" class="text-danger" />
                            </div>
                            <div class="form-group mb-3">
                                <InputText type="password" @bind-Value="Input.Password" class="form-control"
                                           autocomplete="new-password" aria-required="true" placeholder="password" />
                                <ValidationMessage For="() => Input.Password" class="text-danger" />
                            </div>
                            <div class="form-group mb-3">
                                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control"
                                           autocomplete="new-password" aria-required="true" placeholder="conform password" />
                                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                            </div>
                            <button type="submit" class="w-100 btn btn-primary">Register</button>
                        </EditForm>
                    </section>
                </div>
                <div class="row mt-4">
                    <label class="col-md-12">
                        <span>Already have an account? </span>
                        <a href="/Account/Login"
                           class="anchor-tag p-0">Login</a>
                    </label>
                    <label class="col-md-12 mt-1" hidden>
                        <a href="Account/ResendEmailConfirmation" class="anchor-tag p-0">Resend email confirmation</a>
                    </label>
                </div>
                <div class="row my-3"> <span class="text-center">or</span></div>
                <div class="row">

                    <button type="button" class="w-100 btn btn-outline-info">
                        <i class="bi bi-google me-2"></i> <span class="text-center">Log in with Google</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private TaskManagerUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<TaskManagerUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(TaskManagerUser)}'. " +
                $"Ensure that '{nameof(TaskManagerUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<TaskManagerUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<TaskManagerUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
